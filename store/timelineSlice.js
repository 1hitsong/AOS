import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPageData } from './lemmyAPI';

const initialState = {
  postData: []
};

export const getPageData = createAsyncThunk(
  'timeline/fetchPage',
  async (props) => {
    const response = await fetchPageData(props);
    // The value we return becomes the `fulfilled` action payload
    return response.posts;
  }
);

export const reloadPageData = createAsyncThunk(
  'timeline/reloadPage',
  async (props) => {
    const response = await fetchPageData(props);
    // The value we return becomes the `fulfilled` action payload
    return response.posts;
  }
);

export const timelineSlice = createSlice({
    name: 'timeline',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getPageData.fulfilled, (state, action) => {
          state.postData = state.postData.concat(action.payload)
        })
        .addCase(reloadPageData.fulfilled, (state, action) => {
          state.postData = action.payload
        })
    },
  });

export const selectPageData = (state) => state.timeline.postData;

export default timelineSlice.reducer;